name: Android Tests
on:
  workflow_dispatch:

jobs:
  run-android-tests:
    runs-on: macos-latest
    outputs:
      jobstatus: ${{ steps.savedJobstatus.outputs.result }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'adopt'
          cache: 'gradle'

      - name: Gradle cache
        uses: gradle/gradle-build-action@v2

      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-31

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 31
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          target: google_apis
          arch: x86_64
          disable-animations: false
          ram-size: 1500M
          heap-size: 2000M
          disk-size: 5000M
          script: echo "Generated AVD snapshot for caching."

      - name: Run Unit Tests
        run: ./gradlew test --stacktrace

      - name: Run UI Tests
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          api-level: 31
          force-avd-creation: false #Cache
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none #Cache
          target: google_apis
          arch: x86_64
          disable-animations: true
          ram-size: 1500M
          heap-size: 2000M
          disk-size: 5000M
          script: ./gradlew connectedCheck --stacktrace

      # Save job status
      - id: savedJobstatus
        if: always()
        run: |
          currentJobStatus=${{ job.status }}
          echo "result=$currentJobStatus" >> $GITHUB_OUTPUT

      - name: Upload Unit Test Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Unit-Test-Report
          path: app/build/reports/tests

      - name: Upload UI Test Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: UI-Test-Report
          path: app/build/reports/androidTests/connected

      - name: Upload XML Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: XML-Test-Report
          path: app/build/outputs/androidTest-results/connected


  publish-android-test-results:
    if: always()
    runs-on: ubuntu-latest
    needs: run-android-tests

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Download test results
      - uses: actions/download-artifact@v3
        with:
          name: UI-Test-Report
          path: app/build/reports/androidTests/connected

      - uses: actions/download-artifact@v3
        with:
          name: XML-Test-Report
          path: app/build/outputs/androidTests-results/connected/TEST-test(AVD) - 12-app-.xml

      # Push test results to external parties
      - name: Deploy Test Results to Github pages ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4
        if: always()
        with:
          folder: app/build/reports/androidTests/connected
          branch: github-pages # Branch name to deploy pages

      - name: Post Android Test results to Slack channel (espresso-testruns)
        uses: rtCamp/action-slack-notify@v2
        if: always()
        env:
          SLACK_CHANNEL: espresso-testruns
          SLACK_COLOR: ${{ needs.run-android-tests.outputs.jobstatus }}
          SLACK_TITLE: Android Tests results
          SLACK_MESSAGE: ${{ needs.run-android-tests.outputs.jobstatus }} - ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          SLACK_FOOTER: Latest UI Test Results - ${{ vars.ESPRESSO_TEST_RESULTS_URL }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Deploy Test Results to Zephyr Scale ðŸš€
        if: always()
        run: |
          zephyrBaseUrl="https://api.zephyrscale.smartbear.com/v2/automations/executions"
          projectKey="MA"
          xmlPath="app/build/outputs/androidTest-results/connected/TEST-test(AVD) - 12-app-.xml"
          autoCreateTestCases="true"
          echo "Uploading test results to Zephyr Scale..."
          curl -H "Authorization: Bearer ${{ secrets.JIRA_ZEPHYR_SCALE_BEARER_TOKEN }}" -F "file=$xmlPath;type=application/xml" "$zephyrBaseUrl/junit?projectKey=$projectKey&autoCreateTestCases=$autoCreateTestCases"

      - name: DEBUG Results to Zephyr Scale ðŸš€
          if: always()
          run: |
            cd app/build/outputs/androidTests-results/connected/
            ls
            pwd